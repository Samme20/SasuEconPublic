"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Constants_1 = require("../util/Constants");
const ErrorHandler_1 = __importDefault(require("../util/ErrorHandler"));
const YIFF_1 = __importDefault(require("./YIFF"));
const perf_hooks_1 = require("perf_hooks");
const get_1 = __importDefault(require("../util/get"));
class Furry {
    constructor(d) {
        if (!d)
            d = {};
        this.options = {
            userAgent: d.userAgent || Constants_1.USER_AGENT,
            apiKey: d.apiKey || "",
            debug: d.debug || (() => null),
            baseURL: d.baseURL || Constants_1.API_URL
        };
    }
    async sendRequest(cat, method, amount) {
        if (!cat)
            throw new TypeError("missing category");
        if (!method)
            method = "json";
        method = method.toLowerCase();
        if (["image"].includes(method) && amount && amount > 1)
            throw new TypeError("Ammount cannot be greater than one when requesting an image or stream.");
        if (amount && amount > 5)
            throw new TypeError("Amount cannot be greater than five.");
        switch (method) {
            case "image": {
                const start = perf_hooks_1.performance.now();
                const r = await get_1.default(`${this.options.baseURL}/${Constants_1.API_VERSION}/furry/${cat}/image`, this.options.userAgent, this.options.apiKey);
                const end = perf_hooks_1.performance.now();
                if (r.statusCode !== 200) {
                    const e = ErrorHandler_1.default(r.statusCode);
                    if (!e)
                        throw new TypeError(`Non 200-OK status code returned from api: ${r.statusCode} ${r.statusMessage}`);
                    else
                        throw new TypeError(e);
                }
                const d = {
                    artists: [],
                    sources: [],
                    width: 0,
                    height: 0,
                    url: "",
                    shortURL: "",
                    reportURL: "",
                    type: "",
                    name: "",
                    ext: ""
                };
                Object.keys(r.headers).map((h) => {
                    if (Object.values(Constants_1.API_HEADERS).includes(h[0])) {
                        const n = Object.keys(Constants_1.API_HEADERS)[Object.values(Constants_1.API_HEADERS).indexOf(h)];
                        if (d[n] instanceof Array)
                            d[n].push(r.headers[h]);
                        else if (typeof d[n] === "number")
                            d[n] = Number(r.headers[h]);
                        else
                            d[n] = r.headers[h];
                    }
                });
                this.debug(`${this.options.baseURL}/${Constants_1.API_VERSION}/furry/${cat}/image`, { start, end, time: parseFloat((end - start).toFixed(2)) });
                return {
                    image: r.body,
                    data: d
                };
                break;
            }
            case "json": {
                const start = perf_hooks_1.performance.now();
                const r = await get_1.default(`${this.options.baseURL}/${Constants_1.API_VERSION}/furry/${cat}`, this.options.userAgent, this.options.apiKey);
                const end = perf_hooks_1.performance.now();
                if (r.statusCode !== 200) {
                    const e = ErrorHandler_1.default(r.statusCode);
                    if (!e)
                        throw new TypeError(`Non 200-OK status code returned from api: ${r.statusCode} ${r.statusMessage}`);
                    else
                        throw new TypeError(e);
                }
                let b;
                try {
                    b = JSON.parse(r.body.toString());
                }
                catch (e) {
                    throw new TypeError(`Error parsing JSON body: ${e.stack}`);
                }
                this.debug(`${this.options.baseURL}/${Constants_1.API_VERSION}/furry/${cat}`, { start, end, time: parseFloat((end - start).toFixed(2)) });
                return amount === 1 ? b.images[0] : b.images;
                break;
            }
        }
    }
    get boop() { return this.sendRequest.bind(this, "boop"); }
    get cuddle() { return this.sendRequest.bind(this, "cuddle"); }
    get flop() { return this.sendRequest.bind(this, "flop"); }
    get fursuit() { return this.sendRequest.bind(this, "fursuit"); }
    get hold() { return this.sendRequest.bind(this, "hold"); }
    get howl() { return this.sendRequest.bind(this, "howl"); }
    get hug() { return this.sendRequest.bind(this, "hug"); }
    get kiss() { return this.sendRequest.bind(this, "kiss"); }
    get lick() { return this.sendRequest.bind(this, "lick"); }
    get propose() { return this.sendRequest.bind(this, "propose"); }
    get butts() { return this.sendRequest.bind(this, "butts"); }
    get bulge() { return this.sendRequest.bind(this, "bulge"); }
    get yiff() { return new YIFF_1.default(this.options); }
    get debug() { return this.options.debug; }
}
exports.default = Furry;
