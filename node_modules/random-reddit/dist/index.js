"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RandomReddit = void 0;
const reddit_wrapper_v2_1 = __importDefault(require("reddit-wrapper-v2"));
const utils_1 = require("./utils");
const console_1 = require("console");
const VERSION = '1.0.0';
/**
 * Reddit's random class for random posts
 *
 * Usage:
 * 1. Create the instance of this class and pass the Reddit credentials in the constructor
 * 2. Use `getPost()` or `getImage()` method from your instance
 */
class RandomReddit {
    /**
     * Creates new RandomReddit instance
     * @param params - Reddit credentials. They go straigt to the reddit api wrapper
     * @see https://github.com/Javin-Ambridge/reddit-wrapper#reddit-api-options
     */
    constructor(params) {
        /** whether or not the debug mode is enabled */
        this._canLog = false;
        this._reddit = reddit_wrapper_v2_1.default({
            user_agent: `${process.platform}:grabbit:${VERSION} (by /u/mamoru-kun)`,
            retry_on_wait: true,
            retry_on_server_error: 5,
            retry_delay: 5,
            logs: false,
            ...params
        }).api;
        this._canLog = (params === null || params === void 0 ? void 0 : params.logs) || false;
    }
    /**
     * Returns the random post from specified subreddit
     * @param subreddit - subreddit name (without `r/` part)
     */
    async getPost(subreddit, retryLimit = 10) {
        var _a, _b, _c;
        let retries = 0;
        const pickedSub = Array.isArray(subreddit) ? utils_1.getRandomItemFrom(subreddit) : subreddit;
        const [code, response] = await this._reddit.get(`/r/${pickedSub}/random?count=50`);
        if (code !== 200) {
            console_1.assert(retries >= retryLimit, '[random-reddit] Request retries limits exceeded!');
            retries += 1;
            return this.getPost(subreddit);
        }
        const children = Array.isArray(response) ? (_b = (_a = response[0]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.children : (_c = response === null || response === void 0 ? void 0 : response.data) === null || _c === void 0 ? void 0 : _c.children;
        const post = utils_1.getRandomItemFrom(children || []);
        if (!post) {
            console_1.assert(retries >= retryLimit, '[random-reddit] Request retries limits exceeded!');
            retries += 1;
            return this.getPost(subreddit);
        }
        return post;
    }
    /**
     * Returns the image from random post from specified subreddit.
     * If the post doesn't have the image - repeats the request until it contains the image
     * @param subreddit - subreddit name (without `r/` part)
     */
    async getImage(subreddit, retryLimit = 10) {
        var _a;
        const post = await this.getPost(subreddit);
        const hasImageLink = /(jpe?g|png|gif)/.test((_a = post === null || post === void 0 ? void 0 : post.data) === null || _a === void 0 ? void 0 : _a.url);
        let retries = 0;
        if (!hasImageLink) {
            if (this._canLog) {
                console.warn("[random-reddit] No image link found! Repeating the process...");
            }
            console_1.assert(retries >= retryLimit, '[random-reddit] Request retries limits exceeded!');
            retries += 1;
            return this.getImage(subreddit);
        }
        // here can be imgur `gifv` links sometimes, they have to be replaced w/ `gif` ones
        return post.data.url.replace('gifv', 'gif');
    }
    async getPostFromUser(user, retryLimit = 10) {
        let retries = 0;
        const pickedUser = Array.isArray(user) ? utils_1.getRandomItemFrom(user) : user;
        const [code, response] = await this._reddit.get(`/user/${pickedUser}/overview?type=links`);
        if (code !== 200) {
            console_1.assert(retries >= retryLimit, '[random-reddit] Request retries limits exceeded!');
            retries += 1;
            return this.getPost(user);
        }
        return response;
    }
}
exports.RandomReddit = RandomReddit;
//# sourceMappingURL=index.js.map